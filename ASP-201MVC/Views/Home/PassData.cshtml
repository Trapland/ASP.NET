@model ASP_201MVC.Models.Home.PassDataModel

@{
    ViewData["Title"] = @Model.Header;
}

<div class="text-center">
    <h1 class="display-4">@Model.Title</h1>

</div>
<p>
    Хоча ASP деталізується як ASP.NET MVC, розуміння "моделі" у цьому
    дещо відрізняється від паттерну MVC. У паттерні модель - це архітектурна
    частина програми, призначена для "постачання даних". У ASP модель - 
    це об'єкт (клас), який використовується для передачі даних від
    контролера до представлення.
</p>
<p>
    Моделі спрощують використання ViewData, інкапсулюючи дані в одному об'єкті.
    Для впровадження моделі необхідно <br />
    - У папці Models створюємо ще одну папку з іменем контроллеру(Home)<br />
    - Y папці Home створюємо класс з назвою представлення (PassDataModel)<br />
    - У класі описуємо поля / властивості <br />
    - У контролері створюємо об'єкт цього класу (var model = new...) та
    передаємо його у виклик View(model)<br />
    - На початку представлення додаємо інструкцію &commat;model і зазначаємо її тип<br />
    - У тілі представлення звертаємось до моделі через властивість Model
</p>

    <table style="border: 1px solid black; width:600px">
       <tr><th>№</th><th>Name</th><th>Price</th></tr>
    @for (int i = 0; i < Model.Products.Count; i++)
    {
        @if (i % 2 == 0)
        {
                          <tr style="border: 1px solid black; background-color: gray;"><td>@(i + 1)</td><td>@Model.Products[i].Name</td><td>@Model.Products[i].Price.ToString("0.00")</td></tr>
        }
        else
        {
                          <tr style="border: 1px solid black;"><td>@(i + 1)</td><td>@Model.Products[i].Name</td><td>@Model.Products[i].Price.ToString("0.00")</td></tr>
        }

    }
</table>